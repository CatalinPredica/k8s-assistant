/* General Body and Font Styling */

 /* 
  Root variables define the color palette and key UI colors used throughout the application.
  Using CSS variables allows for easy theming and consistent styling, facilitating maintainability and scalability.
  The body styles set up a clean, readable base font and background, enhancing accessibility with good contrast.
  Font smoothing improves text rendering across different platforms and browsers for better UX.
*/

:root {
  --background-color: #f4f7f9;
  --primary-color: #ffffff;
  --secondary-color: #eef2f5;
  --accent-color: #007bff;
  --accent-hover-color: #0056b3;
  --text-color: #212529;
  --subtle-text-color: #6c757d;
  --border-color: #dee2e6;
  --pre-background: #f8f9fa;
  --error-color: #dc3545;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: var(--background-color);
  color: var(--text-color);
}

 /* Main App Container */
 /*
  The main container centers the application content and constrains its width for optimal readability on large screens.
  Padding and border-radius create a comfortable visual space and soften edges, improving aesthetics.
  Box-shadow and border add subtle depth and separation from the background, enhancing focus on the content.
  This container acts as the foundational layout block, ensuring consistent spacing and alignment across different screen sizes.
*/

.app-container {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 2.5rem;
  background-color: var(--primary-color);
  border-radius: 12px;
  box-shadow: 0 4px 20px rgb(0 0 0 / 8%);
  border: 1px solid var(--border-color);
}

 /* Header */

 /*
  Header styles define the primary page title and subtitle, establishing hierarchy and branding.
  The h1 uses a larger font size and a bottom border to visually separate the header from the content.
  The paragraph uses a subtle text color and spacing to complement the title without overpowering it.
  This clear typographic hierarchy improves scannability and user orientation.
*/

.app-header h1 {
  color: var(--text-color);
  font-size: 2rem;
  margin-top: 0;
  border-bottom: 1px solid var(--border-color);
  padding-bottom: 1rem;
}

.app-header p {
  color: var(--subtle-text-color);
  margin-bottom: 2rem;
  font-size: 1.1rem;
}

 /* Form Styling */

 /*
  The form container uses flexbox to align input and button horizontally with consistent spacing.
  Input fields are styled for clarity and accessibility, with sufficient padding and font size.
  Border radius and color transitions provide visual feedback on focus, enhancing usability.
  Disabled states visually indicate non-interactive elements, improving user understanding.
  Buttons are styled for prominence with clear hover and disabled states, supporting interactive affordance.
  Using flex properties and min-width ensures responsive and accessible controls.
*/

.form-container {
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
}

.form-container input[type="text"] {
  flex-grow: 1;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  background-color: var(--primary-color);
  color: var(--text-color);
  border: 1px solid var(--border-color);
  border-radius: 8px;
  outline: none;
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.form-container input[type="text"]:focus {
  border-color: var(--accent-color);
  box-shadow: 0 0 0 4px rgb(0 123 255 / 15%);
}

.form-container input[type="text"]:disabled {
  background-color: var(--secondary-color);
  cursor: not-allowed;
}

.form-container button {
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  font-weight: 500;
  background-color: var(--accent-color);
  color: #fff;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 80px;
  transition: background-color 0.3s ease;
}

.form-container button:disabled {
  background-color: #a0c7ff;
  cursor: not-allowed;
}

.form-container button:hover:not(:disabled) {
  background-color: var(--accent-hover-color);
}

 /* Loader Spinner */

 /*
  The loader spinner provides visual feedback during asynchronous operations.
  Circular spinner with animation ensures users are aware of ongoing processes.
  Using border colors and animation creates a smooth spinning effect without images.
  Size is kept small to avoid distraction but visible enough for clarity.
  Accessibility considerations include ensuring it does not interfere with screen readers.
*/

.loader {
  border: 4px solid rgb(0 0 0 / 10%);
  border-radius: 50%;
  border-top: 4px solid var(--accent-color);
  width: 20px;
  height: 20px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

 /* Error Message */

 /*
  Error messages use color and background to draw attention without overwhelming the user.
  Border and padding create a distinct, accessible alert area.
  Using semi-transparent backgrounds keeps the UI visually balanced.
  Consistent styling helps users quickly identify error states for better UX.
*/

.error-message {
  color: var(--error-color);
  background-color: rgb(220 53 69 / 5%);
  border: 1px solid rgb(220 53 69 / 20%);
  padding: 1rem;
  border-radius: 8px;
  margin-top: 1rem;
}

 /* Response Container */

 /*
  Response container styles define how the output or results are presented.
  Headings use clear typography and borders for separation.
  Preformatted text blocks use monospace fonts for readability of code or structured data.
  Background and border styling maintain visual consistency and focus.
  Word wrapping and line height enhance readability on various screen sizes.
  Markdown response styling supports rich text rendering with consistent UI.
*/

.response-container {
  margin-top: 2rem;
}

.response-container h2 {
  color: var(--text-color);
  border-bottom: 1px solid var(--border-color);
  padding-bottom: 0.75rem;
  font-size: 1.5rem;
}

.response-container pre {
  background-color: var(--pre-background);
  color: var(--text-color);
  padding: 1rem;
  border-radius: 8px;
  border: 1px solid var(--border-color);
  white-space: pre-wrap;
  word-wrap: break-word;
  font-family: SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace;
  font-size: 0.75rem;
  line-height: 1.6;
}

.markdown-response {
  background-color: var(--pre-background);
  color: var(--text-color);
  padding: 1rem;
  border-radius: 8px;
  border: 1px solid var(--border-color);
  word-wrap: break-word;
  font-size: 0.85rem;
  line-height: 1.6;
}

 /* Debugging Section */

 /*
  Debug container provides a visually subdued area for displaying debug information.
  Reduced opacity ensures it does not distract from primary content while remaining accessible.
  Proper margin separates it from other UI elements, maintaining layout clarity.
  Useful for developers and advanced users without impacting general user experience.
*/

.debug-container {
  margin-top: 2rem;
  opacity: 0.8;
}